{% set name = "openmm" %}
{% set version = "7.4.0" %}
{% set proc_version = "1.0.0" %}
{% set build = 0 %}
{% set proc_build = 0 %}

{% if cuda_compiler_version is defined and cuda_compiler_version != "None" %}
  {% set proc_type = "gpu" %}
  {% set n_platforms = 4 %}
{% else %}
  {% set proc_type = "cpu" %}
  {% set n_platforms = 2 %}
{% endif %}

package:
  name: openmm-split

source:
  url: https://github.com/openmm/{{ name }}/archive/{{ version }}.tar.gz
  sha256: cb7ddd923d6f402cf2723b3c14509915abad328505e8ce401ac3131706dabeff


build:
  number: 0
  skip: true  # [py2k]


outputs:
  - name: openmm-proc
    version: {{ proc_version }}
    build:
      number: {{ proc_build }}
      string: {{ proc_type }}
    test:
      commands:
        - exit 0
    about:
      home: https://github.com/conda-forge/openmm-feedstock
      license: BSD-3-Clause
      license_family: BSD
      summary: A meta-package to select CPU or GPU OpenMM builds.

  - name: openmm
    version: {{ version }}
    build:
      number: {{ build }}
      string: "py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build }}_{{ proc_type }}"
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
        - {{ cdt('mesa-libgl-devel') }}  # [cuda_compiler_version != "None"]
        - cmake
        - jom  # [win]
      host:
        - python
        - fftw
        - swig
        - pthread-stubs
        - lxml
        - numpy
        - cython
        # needed for Python wrappers
        - doxygen 1.8.14
      run:
        - python
        - fftw
        - numpy
        - cython
      run_constrained:
        - openmm-proc * {{ proc_type }}
    script: install_openmm.sh  # [not win]
    script: install_openmm.bat  # [win]
    test:
      imports:
        - simtk
        - simtk.openmm
      commands:
        - python -m simtk.testInstallation
        # Debug hardcoded library path
        - python -c "import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'"
        # Check for silent errors in plugin loading
        - python -c "import simtk.openmm as mm; err = mm.Platform.getPluginLoadFailures(); assert not err, err"
        # We should see two platforms: Reference and CPU
        - python -c "from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == {{ n_platforms }}, f'# platforms ({n}) != {{ n_platforms }}'"
    about:
      home: http://openmm.org
      license: MIT
      license_family: MIT
      license_file: docs-source/licenses/Licenses.txt
      summary: 'A high performance toolkit for molecular simulation.'

      description: |
        OpenMM is a toolkit for molecular simulation. It can be used either as a
        stand-alone application for running simulations, or as a library you call
        from your own code. It provides a combination of extreme flexibility
        (through custom forces and integrators), openness, and high performance
        (especially on recent GPUs) that make it truly unique among simulation
        codes.
      doc_url: http://docs.openmm.org
      dev_url: https://github.com/openmm/openmm

about:
  home: http://openmm.org
  license: MIT
  license_family: MIT
  license_file: docs-source/licenses/Licenses.txt
  summary: 'A high performance toolkit for molecular simulation.'

  description: |
    OpenMM is a toolkit for molecular simulation. It can be used either as a
    stand-alone application for running simulations, or as a library you call
    from your own code. It provides a combination of extreme flexibility
    (through custom forces and integrators), openness, and high performance
    (especially on recent GPUs) that make it truly unique among simulation
    codes.
  doc_url: http://docs.openmm.org
  dev_url: https://github.com/openmm/openmm

extra:
  recipe-maintainers:
    - jchodera
    - jaimergp
    - peastman